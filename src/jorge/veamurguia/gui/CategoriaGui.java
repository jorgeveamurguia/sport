/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CategoriaGui.java
 *
 * Created on 11-mar-2010, 21:08:38
 */

package jorge.veamurguia.gui;
import java.awt.Component;

import java.awt.EventQueue;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.beans.Beans;
import java.util.ArrayList;
import java.util.List;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import jorge.veamurguia.basededatos.GestorSql;
import jorge.veamurguia.entidad.Articulo;
import jorge.veamurguia.entidad.Categoria;

import org.jdesktop.application.Application;

/**
* This code was edited or generated using CloudGarden's Jigloo
* SWT/Swing GUI Builder, which is free for non-commercial
* use. If Jigloo is being used commercially (ie, by a corporation,
* company or business for any purpose whatever) then you
* should purchase a license for each developer using Jigloo.
* Please visit www.cloudgarden.com for details.
* Use of Jigloo implies acceptance of these licensing terms.
* A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED FOR
* THIS MACHINE, SO JIGLOO OR THIS CODE CANNOT BE USED
* LEGALLY FOR ANY CORPORATE OR COMMERCIAL PURPOSE.
*/
/**
 *
 * @author jorge
 */
public class CategoriaGui extends JPanel implements MouseListener ,IOpcionPulsada,  WindowListener{
    
	int opcionPulsada=-1;
	boolean filtro=false;
	IIDCodigo idcodigo;
	GestorSql sql;
    
	public CategoriaGui(IIDCodigo idcodigo) {
		this.idcodigo=idcodigo;
		initComponents();

		sql =GestorSql.getInstance();
		refresh();
    }
	public CategoriaGui() {
		this.idcodigo=null;
		initComponents();
		sql =GestorSql.getInstance();
		refresh();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idLabel = new javax.swing.JLabel();
        categoriaLabel = new javax.swing.JLabel();
        GroupLayout layout = new GroupLayout((JComponent)this);
        this.setLayout(layout);
        idField = new javax.swing.JTextField();
        categoriaField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        idLabel.setText("Id:");

        categoriaLabel.setText("Categoria:");



        saveButton.setText("Salvar");
        {
        	jScrollPane1 = new JScrollPane();
        	{
        		TableModel jTable1Model = 
        			new DefaultTableModel(
        					new String[][] { { "One", "Two" }, { "Three", "Four" } },
        					new String[] { "ID", "Categoria" });
        		jTable1 = new JTable();
        		jScrollPane1.setViewportView(jTable1);
        		jTable1.setModel(jTable1Model);
        	}
        }
        {
        	filterButton = new JCheckBox();
        	filterButton.setName("filterButton");
        	filterButton.addActionListener(formListener);
        	filterButton.setText("Seleted");
        }
       //(this);
        //this.addContainerListener(this);
        jTable1.addMouseListener(this);
        saveButton.addActionListener(formListener);

        
        refreshButton.setText("Recargar");
        refreshButton.addActionListener(formListener);

        newButton.setText("AÃ±adir");
        newButton.addActionListener(formListener);

        deleteButton.setText("Borrar");
        layout.setVerticalGroup(layout.createSequentialGroup()
        	.addContainerGap()
        	.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 136, GroupLayout.PREFERRED_SIZE)
        	.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
        	    .addComponent(idField, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	    .addComponent(idLabel, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE))
        	.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        	.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
        	    .addComponent(categoriaField, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	    .addComponent(categoriaLabel, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE))
        	.addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 0, Short.MAX_VALUE)
        	.addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
        	    .addComponent(newButton, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	    .addComponent(deleteButton, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	    .addComponent(refreshButton, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	    .addComponent(saveButton, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	    .addComponent(filterButton, GroupLayout.Alignment.BASELINE, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE))
        	.addGap(6));
        layout.setHorizontalGroup(layout.createSequentialGroup()
        	.addContainerGap()
        	.addGroup(layout.createParallelGroup()
        	    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
        	        .addComponent(categoriaLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
        	        .addGroup(layout.createParallelGroup()
        	            .addComponent(categoriaField, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 316, GroupLayout.PREFERRED_SIZE)
        	            .addComponent(idField, GroupLayout.Alignment.LEADING, GroupLayout.PREFERRED_SIZE, 316, GroupLayout.PREFERRED_SIZE)))
        	    .addGroup(GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
        	        .addComponent(idLabel, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	        .addGap(0, 33, Short.MAX_VALUE)
        	        .addComponent(filterButton, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
        	        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED, 1, GroupLayout.PREFERRED_SIZE)
        	        .addComponent(newButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
        	        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        	        .addComponent(deleteButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
        	        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        	        .addComponent(refreshButton, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.PREFERRED_SIZE)
        	        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
        	        .addComponent(saveButton, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE))
        	    .addGroup(layout.createSequentialGroup()
        	        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 393, GroupLayout.PREFERRED_SIZE)
        	        .addGap(0, 0, Short.MAX_VALUE)))
        	.addContainerGap());
        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {deleteButton, newButton, refreshButton, saveButton});

        deleteButton.addActionListener(formListener);

        Application.getInstance().getContext().getResourceMap(getClass()).injectComponents(this);

        

    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == saveButton) {
                CategoriaGui.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                CategoriaGui.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                CategoriaGui.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == filterButton) {
                CategoriaGui.this.filterButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                CategoriaGui.this.deleteButtonActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    public void refresh(){

    	Object objeto[];
    	Categoria categoria= new Categoria();
    	if(filtro){
    		if(idField.getText().length()>0)
            categoria.ID=Integer.parseInt(idField.getText());
    		if(categoriaField.getText().length()>0)
    		categoria.Categoria=categoriaField.getText();

    	}
    	objeto=sql.find(categoria,filtro);
		System.out.print("Objetos encontrados"+objeto.length);
    	
    	String [] [] columns =new String[objeto.length][];
    	String [] results;
    	for(int i=0 ; i<objeto.length; i++){
    		categoria =(Categoria)objeto[i];
    		results =new String[2];
    		results[0]=""+categoria.ID;
    		results[1]=categoria.Categoria;
    		columns[i]= results;
    	}
    	//results =new String[2];
    	//results[0]="dato1";
    	//results=new String[] { "dato1", "dato2" };
    	
    	//columns[0]=results;
		TableModel jTable1Model = 
			new DefaultTableModel(
					//new String[][] { { "dato1", "dato2" }, { "dato21", "dato22" } },
					columns ,
					new String[] { "ID", "Categoria" });
		
		jTable1.setModel(jTable1Model);
    }
    
    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed

    	refresh();
    	
    }//GEN-LAST:event_refreshButtonActionPerformed
    @SuppressWarnings("unchecked")
    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
    	filtro=!filtro;
    	refresh();
    	
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

    	int response=0;
    	int[] selected = jTable1.getSelectedRows();
        int id=Integer.parseInt(jTable1.getModel().getValueAt(selected[0], 0).toString());
        Categoria categoria=new Categoria();
        categoria.ID=id;

        
        Articulo articulo =new Articulo();
        articulo.ID_Categoria=categoria;
        
        Object objetos[] = sql.find(articulo);//devuelve todos los articulos relacionados con categoria ID

        if(objetos.length>0){
        	
        	response= JOptionPane.showConfirmDialog(this, 
        			"No se puede borrar la categoria: Borre primero los articulos relacionados", 
        			"Borrar categorias",  JOptionPane.CLOSED_OPTION);//,JOptionPane.QUESTION_MESSAGE);
        }else{

        	categoria.ID=id;
        	sql.borrar(categoria);
	        refresh();
        	
        }
    	if(false && response==JOptionPane.YES_OPTION){

        	categoria.ID=id;
	        sql.borrar(categoria);
	        sql.borrar(articulo);
	        //si hay una categoria vinculada a un articulo no se puede borrar 
	        //o preguntar si se quiere borrar todos los articulos relacionados
	        refresh();

    	}

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed

    
    	Categoria categoria=new Categoria();
    	try {
    	
    		if(idField.getText().length()!=0)
    			categoria.ID=Integer.parseInt(idField.getText());
        
        categoria.Categoria=categoriaField.getText();

        if( ! sql.crear(categoria)){
      		
           	JOptionPane.showConfirmDialog(this, 
        			"Error", 
        			"No se pudo insertar los datos",  JOptionPane.CLOSED_OPTION);
          }
    	}catch(NumberFormatException ex){
    	   	JOptionPane.showConfirmDialog(this, 
        			"Error", 
        			"Error en el ID . Debe ser numÃ©rico",  JOptionPane.CLOSED_OPTION);
    	}
    	refresh();   		
    }//GEN-LAST:event_newButtonActionPerformed
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        Categoria categoria=new Categoria();
        
        categoria.ID=Integer.parseInt(idField.getText());
        
        if(categoriaField.getText().length()>=0)
        	categoria.Categoria=categoriaField.getText();

        
   	    if( ! sql.update(categoria)){
   	    	JOptionPane.showConfirmDialog(this, 
        			"Error", 
        			"No se pudo actualizar los datos",  JOptionPane.CLOSED_OPTION);

	      }    		
   	    refresh();
   	 
    }//GEN-LAST:event_saveButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField categoriaField;
    private JScrollPane jScrollPane1;
    private JCheckBox filterButton;
    private JTable jTable1;
    private javax.swing.JLabel categoriaLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton newButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
    
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new CategoriaGui(null));
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }

	@Override
	public void mouseClicked(MouseEvent arg0) {
		// TODO Auto-generated method stub

	      int[] selected = jTable1.getSelectedRows();

	        categoriaField.setText(jTable1.getModel().getValueAt(selected[0], 1).toString());
	        idField.setText(jTable1.getModel().getValueAt(selected[0], 0).toString());
	        //pasa el valor seleccionado al formulario que le ha llamado siempre que no sea null
	        if (idcodigo!=null){
	        	idcodigo.setCodigo(Integer.parseInt(idField.getText()),categoriaField.getText());
	        }
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setOpcion(int opcion) {
		// TODO Auto-generated method stub
		opcionPulsada=opcion;
	}

	@Override
	public int getOpcion() {
		// TODO Auto-generated method stub
		return opcionPulsada;
	}

	@Override
	public void windowActivated(WindowEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowClosed(WindowEvent arg0) {
		// TODO Auto-generated method stub
		idcodigo.setCodigo(-1,null);

	}

	@Override
	public void windowClosing(WindowEvent arg0) {
		// TODO Auto-generated method stub
		idcodigo.setCodigo(-1,null);
		
	}

	@Override
	public void windowDeactivated(WindowEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowDeiconified(WindowEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowIconified(WindowEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowOpened(WindowEvent arg0) {
		// TODO Auto-generated method stub
		
	}

}
